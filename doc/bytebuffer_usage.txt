http://www.java-tips.org/java-se-tips/java.nio/how-to-put-bytes-into-a-bytebuffer-2.html

// Create an empty ByteBuffer with a 10 byte capacity
ByteBuffer bbuf = ByteBuffer.allocate(10);

// Retrieve the capacity of the ByteBuffer
int capacity = bbuf.capacity(); // 10

// Use the absolute put().
// This method does not affect the position.
bbuf.put((byte)0xFF); // position=0

// Set the position
bbuf.position(5);

// Use the relative put()
bbuf.put((byte)0xFF);

// Get the new position
int pos = bbuf.position(); // 6

// Get remaining byte count
int rem = bbuf.remaining(); // 4

// Set the limit
bbuf.limit(7); // remaining=1

// This convenience method sets the position to 0
bbuf.rewind(); // remaining=7 



http://hi.baidu.com/xcl119xcl/blog/item/f9d808fc3f1b1bf8fd037fc2.html


java.nio.ByteBuffer 类2008-07-01 09:39
来自http://blog.csdn.net/daijialin/archive/2004/12/27/231384.aspx


最近要写麻将程序时. 偶然看到这个类. 在JDK帮助文档上看了半天模模糊糊的. 还好上边的帖子有个例子才弄清了. 
在需要一个缓冲区的时候应该考虑用这个类.


Buffer 类 
定义了一个可以线性存放primitive type数据的容器接口。Buffer主要包含了与类型（byte, char…）无关的功能。
值得注意的是Buffer及其子类都不是线程安全的。 

每个Buffer都有以下的属性： 

capacity
这个Buffer最多能放多少数据。capacity一般在buffer被创建的时候指定。

limit
在Buffer上进行的读写操作都不能越过这个下标。当写数据到buffer中时，limit一般和capacity相等，当读数据时，
limit代表buffer中有效数据的长度。

position
读/写操作的当前下标。当使用buffer的相对位置进行读/写操作时，读/写会从这个下标进行，并在操作完成后，
buffer会更新下标的值。

mark
一个临时存放的位置下标。调用mark()会将mark设为当前的position的值，以后调用reset()会将position属性设
置为mark的值。mark的值总是小于等于position的值，如果将position的值设的比mark小，当前的mark值会被抛弃掉。

这些属性总是满足以下条件：
0 <= mark <= position <= limit <= capacity

limit和position的值除了通过limit()和position()函数来设置，也可以通过下面这些函数来改变：

Buffer clear()
把position设为0，把limit设为capacity，一般在把数据写入Buffer前调用。

Buffer flip()
把limit设为当前position，把position设为0，一般在从Buffer读出数据前调用。

Buffer rewind()
把position设为0，limit不变，一般在把数据重写入Buffer前调用。

Buffer对象有可能是只读的，这时，任何对该对象的写操作都会触发一个ReadOnlyBufferException。
isReadOnly()方法可以用来判断一个Buffer是否只读。


ByteBuffer 类

在Buffer的子类中，ByteBuffer是一个地位较为特殊的类，因为在java.io.channels中定义的各种channel的IO
操作基本上都是围绕ByteBuffer展开的。 

ByteBuffer定义了4个static方法来做创建工作： 

ByteBuffer allocate(int capacity) //创建一个指定capacity的ByteBuffer。
ByteBuffer allocateDirect(int capacity) //创建一个direct的ByteBuffer，这样的ByteBuffer在参与IO操作时性能会更好
ByteBuffer wrap(byte [] array)
ByteBuffer wrap(byte [] array, int offset, int length) //把一个byte数组或byte数组的一部分包装成ByteBuffer。

ByteBuffer定义了一系列get和put操作来从中读写byte数据，如下面几个：
byte get()
ByteBuffer get(byte [] dst)
byte get(int index)
ByteBuffer put(byte b)
ByteBuffer put(byte [] src)
ByteBuffer put(int index, byte b) 
这些操作可分为绝对定位和相对定为两种，相对定位的读写操作依靠position来定位Buffer中的位置，并在操
作完成后会更新position的值。在其它类型的buffer中，也定义了相同的函数来读写数据，唯一不同的就是一
些参数和返回值的类型。

除了读写byte类型数据的函数，ByteBuffer的一个特别之处是它还定义了读写其它primitive数据的方法，如：

int getInt()       //从ByteBuffer中读出一个int值。
ByteBuffer putInt(int value)     // 写入一个int值到ByteBuffer中。

读写其它类型的数据牵涉到字节序问题，ByteBuffer会按其字节序（大字节序或小字节序）写入或读出一个其它
类型的数据（int,long…）。字节序可以用order方法来取得和设置：
ByteOrder order() //返回ByteBuffer的字节序。
ByteBuffer order(ByteOrder bo)   // 设置ByteBuffer的字节序。

ByteBuffer另一个特别的地方是可以在它的基础上得到其它类型的buffer。如：
CharBuffer asCharBuffer()
为当前的ByteBuffer创建一个CharBuffer的视图。在该视图buffer中的读写操作会按照ByteBuffer的字节
序作用到ByteBuffer中的数据上。

用这类方法创建出来的buffer会从ByteBuffer的position位置开始到limit位置结束，可以看作是这段数据
的视图。视图buffer的readOnly属性和direct属性与ByteBuffer的一致，而且也只有通过这种方法，才可
以得到其他数据类型的direct buffer。

ByteOrder
用来表示ByteBuffer字节序的类，可将其看成java中的enum类型。主要定义了下面几个static方法和属性：
ByteOrder BIG_ENDIAN       代表大字节序的ByteOrder。
ByteOrder LITTLE_ENDIAN       代表小字节序的ByteOrder。
ByteOrder nativeOrder()       返回当前硬件平台的字节序。

MappedByteBuffer
ByteBuffer的子类，是文件内容在内存中的映射。这个类的实例需要通过FileChannel的map()方法来创建。



接下来看看一个使用ByteBuffer的例子，这个例子从标准输入不停地读入字符，当读满一行后，将收集的字符
写到标准输出：

    public static void main(String [] args) 
       throws IOException
    {
       // 创建一个capacity为256的ByteBuffer
       ByteBuffer buf = ByteBuffer.allocate(256);
       while (true) {
           // 从标准输入流读入一个字符
           int c = System.in.read();
           // 当读到输入流结束时，退出循环
           if (c == -1)
              break;
           // 把读入的字符写入ByteBuffer中
           buf.put((byte) c);
           // 当读完一行时，输出收集的字符
           if (c == '\n') {
              // 调用flip()使limit变为当前的position的值,position变为0,
              // 为接下来从ByteBuffer读取做准备
              buf.flip();
              // 构建一个byte数组
              byte [] content = new byte[buf.limit()];
              // 从ByteBuffer中读取数据到byte数组中
              buf.get(content);
               // 把byte数组的内容写到标准输出
              System.out.print(new String(content));
              // 调用clear()使position变为0,limit变为capacity的值，
              // 为接下来写入数据到ByteBuffer中做准备
              buf.clear();
           } 
      }
    }
 



